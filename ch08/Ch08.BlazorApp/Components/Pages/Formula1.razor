@page "/formula1"
@using Ch08.DataLib
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using Ch08.BlazorApp.Components.Formula1
@inject IFormula1Repository Repository
@inject IServiceProvider ServiceProvider
@rendermode InteractiveServer

<PageTitle>Formula 1 Data Queries</PageTitle>

<h1>Formula 1 Data Queries</h1>

<p>This page demonstrates Entity Framework Core queries with SQL generation display.</p>

<div class="row">
    <QueryOptions 
        SelectedQueryType="@selectedQueryType"
        SelectedQueryTypeChanged="@(async s => await OnQueryTypeChangedAsync(s))"
        CountryFilter="@countryFilter"
        CountryFilterChanged="@(s => countryFilter = s)"
        MinWinsFilter="@minWinsFilter"
        MinWinsFilterChanged="@(i => minWinsFilter = i)"
        OnExecuteQuery="@(async () => await ExecuteQuery())"
        CurrentPage="@currentPage"
        CurrentPageChanged="@(i => OnCurrentPageChanged(i))"
        PageSize="@pageSize"
        PageSizeChanged="@(i => OnPageSizeChanged(i))"
        TotalRecords="@totalRecords" />
    
    <SqlDisplay Sql="@generatedSql" />
</div>

<div class="row mt-4">
    <div class="col-12">
        <h3>Query Results</h3>
        @if (isLoading)
        {
            <LoadingSpinner />
        }
        else if (queryResults != null)
        {
            <div class="table-responsive">
                @if (selectedQueryType == "allRacers" || selectedQueryType == "racersByCountry" || selectedQueryType == "racersWithMinWins")
                {
                    <RacersTable 
                        Racers="((IEnumerable<Racer>)queryResults)"
                        PageSize="@pageSize"
                        PageSizeChanged="@(async i => await OnPageSizeChanged(i))"
                        CurrentPage="@currentPage"
                        CurrentPageChanged="@(async i => await OnCurrentPageChanged(i))" />
                }
                else if (selectedQueryType == "allTeams")
                {
                    <TeamsTable Teams="((IEnumerable<Team>)queryResults)" />
                }
                else
                {
                    <JsonResults Data="queryResults" />
                }
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private string selectedQueryType = "allRacers";
    private string countryFilter = "United Kingdom";
    private int minWinsFilter = 10;
    private object? queryResults;
    private string generatedSql = "";
    private bool isLoading = false;
    private string errorMessage = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalRecords = 0;

    private async Task OnQueryTypeChangedAsync(string value)
    {
        if (selectedQueryType != value)
        {
            selectedQueryType = value;
            currentPage = 1;
            await ExecuteQuery();
        }
    }

    private async Task OnPageSizeChanged(int value)
    {
        if (pageSize != value)
        {
            pageSize = value;
            currentPage = 1;
            await ExecuteQuery();
        }
    }

    private async Task OnCurrentPageChanged(int value)
    {
        if (currentPage != value)
        {
            currentPage = value;
            await ExecuteQuery();
        }
    }

    private async Task ExecuteQuery()
    {
        isLoading = true;
        errorMessage = "";
        queryResults = null;
        generatedSql = "";
        StateHasChanged();

        try
        {
            switch (selectedQueryType)
            {
                case "allRacers":
                    var result = await Repository.GetRacersAsync((currentPage - 1) * pageSize, pageSize);
                    queryResults = result.Racers;
                    totalRecords = result.TotalCount;
                    break;
                case "allTeams":
                    queryResults = await Repository.GetTeamsAsync();
                    break;
                case "racersByCountry":
                    queryResults = await Repository.GetRacersByCountryAsync(countryFilter);
                    break;
                case "racersWithMinWins":
                    queryResults = await Repository.GetRacersWithMostWinsAsync(minWinsFilter);
                    break;
                case "racersGroupedByCountry":
                    queryResults = await Repository.GetRacersGroupedByCountryAsync();
                    break;
                case "teamsWithRacerCount":
                    queryResults = await Repository.GetTeamsWithRacerCountAsync();
                    break;
            }

            generatedSql = Repository.GetLastExecutedSql();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error executing query: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}